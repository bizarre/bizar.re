{"_stem":"092322","title":"Building bizar.re","_path":"/content/journal/092322.json","subtitle":"design + tech","date":"092322","body":"<p>Another day, another new personal site from yours truly.</p>\n\n<p>While the site is still mostly written in Rust, I opted to leverage <a href='f'>Dioxus</a> over <a href='f'>Yew</a> this time around. I find Dioxus to be a bit more intuitive compared to Yew when it comes to functional components and hooks, which enables you to build super similar to the way you&#8217;d typically build in React. The <code>rsx!</code> macro is less &quot;boiler-platey&quot; than Yew&#8217;s <code>html!</code> (with braces being used to &#8217;close&#8217; elements as opposed to &lt;/&gt; tags). To be fair though, it&#8217;s been a minute since I last looked at Yew and I know they&#8217;re doing some pretty cool stuff in the <a href='https://yew.rs/docs/next/getting-started/introduction'>&quot;Next&quot; version</a>.</p>\n\n<h2 id='visual_design'>Visual Design</h2>\n\n<p>The original design for this site is actually super old, older than the design for my previous site.</p>\n\n<p><img src='https://i.imgur.com/T6mJc0j.png' alt='v1 site' /></p>\n\n<p>There&#8217;s a lot in this OG design that I really like:</p>\n\n<ul>\n<li>The &#8217;dynamic&#8217; content (i.e: github contribution chart, language breakdown)</li>\n\n<li>The header layout</li>\n\n<li>Different &quot;about me&quot;&#8217;s based on the topic/page</li>\n\n<li>Generally darker color scheme</li>\n\n<li>&#8217;Dynamic&#8217; accent color that changes based on topic/page</li>\n</ul>\n\n<p>But, after seeing the design for the first time in a long time, I noticed a lot of stuff that could be revised/improved. First thing I did was shrink the fuck out of everything. For whatever reason, I really am a fan of more &quot;compact&quot; designs, especially when dealing with a lack of content; negative space helps focus attention on the little content that <em>does</em> exist.</p>\n\n<p>So, I compacted the design and merged what was originally two separate columns into a single skinnier one:</p>\n\n<p><img src='https://i.imgur.com/bzcW2Rm.png' alt='v1.5 site' /></p>\n\n<p>Whenever I&#8217;m working off of one of my own designs, I always end up making some changes to the design in-code. In the case of this site, I changed a ton of small things that I feel helped make everything a little bit cleaner overall.</p>\n\n<p><img src='https://i.imgur.com/pL925h5.png' alt='os project changes' /> <img src='https://i.imgur.com/tsZqill.png' alt='header change' /> <img src='https://i.imgur.com/PlCwTXR.png' alt='graph change' /> <em>left: original designs, right: after impl + edits</em></p>\n\n<p>Due to the dynamic nature of some of the content, I made a shit ton of UI &quot;skeletons&quot;. My last site didn&#8217;t have any, and when viewed on a slow connection (and coupled with a consequence of how it was written), you were literally staring at a blank page until everything loaded.</p>\n\n<p>NO LONGER! BEHOLD:</p>\n\n<p><img src='https://i.imgur.com/tcQWk2C.png' alt='skeleton loaders' /></p>\n\n<p>Is it overkill? Yeah, probably.</p>\n\n<h2 id='technical_stuff'>Technical stuff</h2>\n\n<p>I really like <a href='https://jekyllrb.com'>Jekyll</a>. Themes are a huge part of Jekyll, often open source&#8217;d stuff with a pre-built structure/style where you can use a configuration file to make basic personalizations. I tried to do something similar with this site, with the intent of making it super easy for somebody to fork, make a couple small changes, and use the same code for their own personal site. <img src='https://i.imgur.com/yNAwjiY.png' alt='config file' /></p>\n\n<p>There&#8217;s a couple caveats still, the pages themselves are hardcoded (i.e: there will always be nerd, photog, hoonigan, etc). So if you aren&#8217;t a nerd or into photography, you&#8217;ll have to make some code changes lol.</p>\n\n<p>Here&#8217;s what the site looks like with a configuration file tailored to <a href='https://github.com/yyx990803'>Evan You</a>, the author of VueJS.</p>\n\n<p><img src='https://i.imgur.com/7YJBheW.png' alt='evan you page' /></p>\n\n<h3 id='reading_the_configuration_file'>Reading the configuration file</h3>\n\n<p>In my last site, I actually just copied the configuration file to a static directory that would be fetched by the client before anything rendered. This irked the fuck out of me because there was no way for the configuration file to change after compile-time, the file was available at compile-time, and having to deal with cache-busting the file when it changed between sessions was <em>suuper</em> annoying. This time, I wanted to fix all those problems.</p>\n\n<p>I could&#8217;ve just dumped the file contents as a static JSON string (using <a href='https://doc.rust-lang.org/std/macro.include_str.html'>std::include_str</a>) and parse it during runtime. However, the idea was to shift as much work as possible away from runtime so I ended up writing a <a href='https://doc.rust-lang.org/book/ch19-06-macros.html'>macro</a> that would read + parse the configuration file and inject the data into a struct at compile-time.</p>\n\n<p><img src='https://i.imgur.com/LW3NUrW.png' alt='config.rs' /></p>\n\n<p>Expanded, the macro adds this definition (it doesn&#8217;t literally add the definition to the source code, but this is what the Rust compiler eventually sees): <img src='https://i.imgur.com/cZ8REMz.png' alt='config.rs expanded' /></p>\n\n<p>The macro automatically responds to changes made to the configuration file and will set the updated fields accordingly. With this approach, the data is available at compile-time, avoiding the need for the client to do an additional fetch and leaving the door open for full static site generation.</p>\n\n<h3 id='populating_the_github_elements'>Populating the GitHub elements</h3>\n\n<p>I wanted the GitHub charts/visuals to be dynamic in that they would show up-to-date information every time without the need for a rebuild. This meant that the data had to be fetched during runtime by the client, as opposed to me fetching the data during build time.</p>\n\n<h4 id='language_breakdown'>Language Breakdown</h4>\n\n<p>GitHub has a sick <a href='https://docs.github.com/en/graphql'>GraphQL API</a>. The only problem I had working with their API in the context of this site was that for unauthenticated requests you&#8217;re limited to 60 requests an hour. This probably wouldn&#8217;t be a problem typically, as each site visitor would be seen as a different actor, and would be able to make 60 requests before the rate-limit kicked in. Unfortunately though, during development, with hot-reloads, etc, I had hit the rate-limit in about 30 seconds. My solution to this problem is kind of jank, but it works for now. I generated a Personal Access Token (PAT) that only has permissions to public repositories, B64 encoded it, and injected that encoded value into the code at compile-time. This makes it accessable to clients during runtime, so they can use my token in the event that they&#8217;re rate-limited. Authenticated sessions have a rate-limit of 5000 requests per hour so, unless I become famous overnight or something, it&#8217;s safe to say that&#8217;ll suffice for awhile. It&#8217;s necessary for the token to be encoded, because if it&#8217;s there in plain-text, GitHub Actions will not allow deployment as it&#8217;s automaticlly flagged as a security risk (and rightfully so).</p>\n\n<p>The colors for the languages are fetched from <a href='https://github.com/ozh/github-colors'>ozh/github-colors</a>, essentially a database of mapped languages -&gt; colors, built from GH&#8217;s own data.</p>\n\n<h4 id='contribution_chart'>Contribution Chart</h4>\n\n<p>The contribution chart doesn&#8217;t use GH&#8217;s API directly, and instead builds off of the same concept I employed in <a href='https://github.com/bizarre/notion-github-embed'>bizarre/notion-github-embed</a>. In this case though, I forked <a href='https://github.com/sallar/github-contributions-chart'>sallar/github-contributions-chart</a> and made some changes to bring the project up-to-date, then deployed the updated version on <a href='https://vercel.com'>Vercel</a>. It exposes an API that allows you to request a user&#8217;s contribution chart data as a JSON document, where the keys are dates and the values are an integer representing the &quot;contribution level&quot; (0-4). This enabled me to build a chart, mapping the cells to a relative date, and coloring them based on the contribution level. Add in some animations and a legend and we&#8217;re pretty much done. I might add in richer hover interactions later (like what you see when you hover a cell on someone&#8217;s GH profile), but it&#8217;s currently low priority as I still have to design &amp; implement two more pages (photography + hoonigan).</p>\n\n<h4 id='repo_cards'>Repo Cards</h4>\n\n<p>A list of repositories (in the format of USERNAME/REPO) is read from the configuration file (via the injected config struct). This list is fed to GH&#8217;s API, requesting star gazer count, fork count, description, language, etc. At which point, local state is populated with the response, and then the component renders. Super simple. Honestly, the hardest part of this component has nothing to do with data-fetching really, and more so with getting the skeleton elements to align with the populated elements. This took forever just because of flexbox shenanigans and line-height discrepancies.</p>\n\n<h3 id='journal'>Journal</h3>\n\n<p>The journal (or blog, w.e) is the latest addition to the site. It works pretty similar to how most SSG blog&#8217;s work, where the content is markdown and part of the main repository. In this case, journal entries reside in <code>./content/journal</code>. Each entry is its own markdown file, and metadata is read from the MD frontmatter.</p>\n\n<p>The process of making these entries available to the frontend and into HTML is a little more involved though. I have a build script that will iterate over all the files in <code>/content/journal</code>. For each file, it parses the markdown and transforms it into an &#8217;enriched&#8217; JSON file where the frontmatter fields are easily accessible. This enriched JSON file gets pushed to <code>/static/content/journal</code>. As part of the enrichment process, I convert the markdown to HTML, avoiding the need to have a MD parser in runtime.</p>\n\n<p>In addition to enriching/transforming the markdown entries, I also build a central list of all entries (<code>/static/content/entries.json</code>). This list contains the title of every post, their location (href), and a description that&#8217;s limited to 255 characters. This file is what is used to build the list-view component on the home page. The idea is to keep this central file as small as possible, so that load times are quick, while also supplying enough information so that we can accurately redirect the client + also provide context to the user as to the post&#8217;s content. <em>Over time, this central file does have the potential of getting super huge, and we can only display so many &quot;stubs&quot; on the main page before we have to start paginating (or introduce ugly scrolling). It&#8217;s probably fine for now, just due to how rare it is for me to make a journal entry, it&#8217;ll be awhile before the downsides of this design start to have an actual impact.</em></p>\n\n<p><a href='https://doc.rust-lang.org/cargo/'>Cargo</a> makes this whole process super easy with the deep integration of the <code>build.rs</code> file, so the whole process just kinda happens in the background.</p>\n\n<p>Leveraging <a href='https://tailwindcss.com/docs/typography-plugin'>Tailwind&#8217;s Typography plugin</a> (and with Dioxus), rendering the entry HTML is as simple as plugging in the HTML as <code>dangerous_inner_html</code> on an element with the <code>prose</code> class. With some modifications to the <code>tailwind.config.js</code> to better fit the site theme, we have a nice looking post.</p>\n\n<h2 id='wrapping_up'>Wrapping up</h2>\n\n<p>I&#8217;ve always viewed programming as an art medium, even when I was a little kid. There&#8217;s an infinite amount of ways to build something, and factoring in and weighing the pros &amp; cons of one approach over another is such a useful skill to have and to hone. I love how, even when building something as simple as a personal site, there are still opportunities to learn and to grow. Being able to witness and partake in the process of transitioning a project from a design to a finished product is a joy I don&#8217;t think I&#8217;ll ever get over. It was tons of fun to work off of one of my own designs as I am by no means a designer. I hope to continue to work and improve this site as time goes on, finishing up the photography and hoonigan pages, and inevitably introducing more problems that need solving.</p>\n\n<p>If you&#8217;ve made it this far, thanks for taking the time to check out the site &amp; read this (rather long) post. If you liked what you read, I implore you to follow me on <a href='https://twitter.com/bizurre'>Twitter</a>, where you will be exposed to content that is nothing like this post, and mostly complete shit posts and memes.</p>\n"}